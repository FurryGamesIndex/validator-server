#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import yaml
import traceback
from jsonschema import validate
from jsonschema.exceptions import ValidationError

from flask import Flask, jsonify, request, Response, send_from_directory
from waitress import serve

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "fgi"))

import fgi
from fgi.base import cook_game
from fgi.i18n import uil10n_load_language
from fgi.generate import Generator
from fgi.renderers.game import RendererGame

gen = Generator(["--no-sitemap", "--no-searchdb", "--next", "--data-dir-prefix", "fgi", "-"])
gen.prepare()
lctx = gen.lctx.copy()
gen.base_l10n["infobar"] ="Generated by FGI validator (BETA)" 
lctx["lang"] = "c"
lctx["ui"] = gen.base_l10n
lctx["rr"] = "https://furrygames.top"

langs = dict()

for i in gen.languages:
    print(f"load language {i}")
    langs[i] = uil10n_load_language(gen, gen.dir_uil10n, gen.base_l10n, i) # FIXME: should be wrapper by upstream

app = Flask(__name__)
schemas = dict()

def result(error, data, ctype='text/plain; charset=utf-8'):
    return Response(data, 200, {
        "Content-Type": ctype
    })

@app.route('/validate/game', methods=['POST'])
def _validate():
    try:
        body = request.form
        schema_game = schemas["game.schema.yaml"]
        schema_game_l10n = schemas["game-l10n.schema.yaml"]

        lang = body["lang"]
        data = body["data"]
        data_l10n = body["data_l10n"]

        try:
            game = yaml.safe_load(data) 
            validate(game, schema_game)
        except ValidationError as e:
            return result(False, "Failed to validate game data:\n\n" + str(e))
        except yaml.YAMLError as e:
            return result(False, "Failed to validate game data:\n\n" + str(e))

        game["id"] = "__VALIDATOR_GAME"
        game["tr"] = dict()
        game["mtime"] = 1

        if lang not in langs:
            return result(False, f"Unsupported language {lang}")

        if lang != "en":
            try:
                game_l10n = yaml.safe_load(data_l10n) 
                validate(game, schema_game_l10n)
            except ValidationError as e:
                return result(False, "Failed to validate game-l10n data:\n\n" + str(e))
            except yaml.YAMLError as e:
                return result(False, "Failed to validate game-l10n data:\n\n" + str(e))

            game["tr"][lang] = game_l10n

        ctx = lctx.copy()
        ctx["lang"] = lang
        ctx["ui"] = langs[lang]
        renderer = RendererGame(gen, ctx)

        try:
            cook_game(game, gen.tagmgr, gen.mfac)
            html = renderer.render_game(game["id"], game)
        except Exception as e: # FIXME: catch system exit and capture output, should be fixed in upstream
            return result(False, ''.join(traceback.format_tb(e.__traceback__)))

        return result(False, html, ctype="text/html; charset=utf-8")
    except:
        print(traceback.format_exc())
        return result(True, "invalid argument or our internal error")

@app.route('/', methods=['GET'])
def _root():
    return send_from_directory('.', 'index.html')

if __name__ == '__main__':
    for i in os.listdir("fgi/schemas/"):
        with open(os.path.join("fgi", "schemas", i)) as f:
            schema = yaml.safe_load(f)
            schemas[i] = schema

    serve(app=app, host='0.0.0.0', port=int(os.getenv('PORT')))
